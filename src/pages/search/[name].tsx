import Layout from '@/components/layout';
import { InferGetServerSidePropsType } from 'next';
import Head from 'next/head';
import styled from 'styled-components';
import MatchList, { IMatchData, IReducedMatchData, IParticipantsInfoData } from '@/components/matchList';

interface ISummonerName {
    params: {name: string};
}

export async function getServerSideProps({ params }: ISummonerName) {

    const options = {
      headers: {'X-Riot-Token': process.env.API_KEY!}
    }

    const summonerRes = await fetch(
      `https://kr.api.riotgames.com/lol/summoner/v4/summoners/by-name/${encodeURI(params.name)}`,
      options
    );

    if (summonerRes.status !== 200) {
      const errData = null;
      return {
        props: { errData }
      };
    }
  
    const summonerData = await summonerRes.json();

    const rankRes = await fetch(
      `https://kr.api.riotgames.com/lol/league/v4/entries/by-summoner/${encodeURI(summonerData.id)}`,
      options
    );

    const rankData = await rankRes.json();

    const matchListIdRes = await fetch(
      `https://asia.api.riotgames.com/lol/match/v5/matches/by-puuid/${encodeURI(summonerData.puuid)}/ids?start=0&count=10`,
      options
    );

    if (matchListIdRes.status !== 200) {
      alert(matchListIdRes.status);
      console.log(matchListIdRes.status);

      const errData = null;
      return {
        props: { errData }
      };
    }

    const matchListIdData = await matchListIdRes.json();

    const matchListFullData: IMatchData[] = await Promise.all(
      matchListIdData.map(async (matchId: string): Promise<IMatchData> => {
        const matchDataRes = await fetch(
          `https://asia.api.riotgames.com/lol/match/v5/matches/${encodeURI(matchId)}`,
          options
        );

        const matchListData = await matchDataRes.json();

        return matchListData;
      })
    )

    // console.log(matchListFullData);

    let matchListData = new Array<IReducedMatchData>();

    matchListFullData.map((match: IMatchData) => {
      let participantsData = new Array<IParticipantsInfoData>();

      match.info.participants.map((participant: any) => {
        const pInfoData: IParticipantsInfoData = {
          summonerId: participant.summonerId,
          summonerName: participant.summonerName,
          puuid: participant.puuid,
          win: participant.win,
          kills: participant.kills,
          deaths: participant.deaths,
          assists: participant.assists,
          champLevel: participant.champLevel,
          championId: participant.championId,
          championName: participant.championName,
          goldEarned: participant.goldEarned,
          totalDamageDealtToChampions: participant.totalDamageDealtToChampions,
          totalDamageTaken: participant.totalDamageTaken,
          visionScore: participant.visionScore,
          sightWardsBoughtInGame: participant.sightWardsBoughtInGame,
          item0: participant.item0,
          item1: participant.item1,
          item2: participant.item2,
          item3: participant.item3,
          item4: participant.item4,
          item5: participant.item5,
          item6: participant.item6,
        }

        // console.log(pInfoData);

        participantsData.push(pInfoData);
      })

      const gameDuration: number = match.info.gameDuration;
      const gameDurationToString: string = String(Math.floor(gameDuration / 60)) 
        + ":" 
        + (((gameDuration % 60) < 10) ? 
          ("0" + String(gameDuration % 60)) : (String(gameDuration % 60))
      );

      // const gameEndDate = new Date(match.info.gameEndTimestamp);

      const matchData: IReducedMatchData = {
        matchId: match.metadata.matchId,
        participantsId: match.metadata.participants,
        gameDuration: gameDurationToString,
        gameEndTimestamp: match.info.gameEndTimestamp,
        gameMode: match.info.gameMode,
        gameType: match.info.gameType,
        participantsInfo: participantsData,
      }

      matchListData.push(matchData);
    });

    const data = {
      summonerData: summonerData,
      rankData: rankData,
      matchListData: matchListData,
    };

    
    return { props: { data } };
}

export default function Summoner({ data }: InferGetServerSidePropsType<typeof getServerSideProps>) {
    
    return (
      <Layout>
        <Head>
          <title>Search Summoner</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        ##Summoner
        <br />
        {/* <p>id: {data?.summonerData.id}</p>
        <p>accountId: {data?.summonerData.accountId}</p>
        <p>puuid: {data?.summonerData.puuid}</p> */}
        <p>name: {data?.summonerData.name}</p>
        <p>profileIconId: {data?.summonerData.profileIconId}</p>
        {/* <p>revisionDate: {data?.summonerData.revisionDate}</p> */}
        <p>summonerLevel: {data?.summonerData.summonerLevel}</p>
        <br />
        ##Rank
        <br />
        {data?.rankData && data.rankData.map((
          {summonerId, queueType, tier, rank, leaguePoints, wins, losses}: {
            summonerId: string,
            queueType: string,
            tier: string,
            rank: string
            leaguePoints: number,
            wins: number,
            losses: number
          }) => (
            <div key={queueType}>
              <p>queueType: {queueType}</p>
              <p>tier: {tier}&nbsp;{rank}</p>
              <p>leaguePoints: {leaguePoints}</p>
              <p>wins: {wins}</p>
              <p>losses: {losses}</p>
              <br />
            </div>
          ))}
        <br />
        ##Match
        {data?.matchListData && <MatchList data={data.matchListData}/>}
      </Layout>
    );
}